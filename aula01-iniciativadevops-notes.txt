criei vm no azure (ubuntu)
acessei via ssh
apt get update e upgrade
sudo apt install docker.io
docker container run (executar um container)
especificar a imagem
docker container run hello-world
ele busca no docker hub (docker registry)
baixa no docker daemon e cria o container, rodando em seguida

docker container ls (lista os containers rodando)
docker container ls -a (lista os containers criados, mesmo os que já terminaram)

docker container run --name meucontainer hello-world
cria o container com o nome especificado (meucontainer)

docker container rm (nome ou id) (remove o container)

docker container run --rm hello-world (executa e remove em seguida)

------------
Interagindo com o container

docker container run -it ubuntu /bin/bash
vai buscar a imagem, criar o container, iniciar a execução e abrir a linha de comando dentro do container como root
atualizei com o apt update
instalei o curl
exit para sair

quando eu saio (exit) e executo novamente (docker container run -it ubuntu /bin/bash), o curl não está mais instalado, porque é uma instância nova do container

----------------
Executando um processo continuamente

Vamos fazer um container ngnix
docker container run nginx
(busca a imagem, cria o container, executa) - o terminal fica travado porque o processo fica em execução contínua

Executar o container em background (deamon)
docker container run -d nginx

Entrar no container:
docker exec -it <id> /bin/bash

Fazer um port-bind:
porta local: 8080
docker container run -d -p 8080:80 nginx
(busca a imagem do nginx, cria o container e executa fazendo a ligação da porta local 8080 com a porta 80 usada pelo nginx)

------------------------
Excluindo os containers:

Se estiver rodando, parar primeiro: 
docker container stop <id>

Excluir:
docker rm <id> 
docker rm -f <id> (para e exclui)

Mostrar somente os IDs dos containers:
docker container ls -a -q

Combinar dois comandos para excluir tudo:
docker container rm -f $(docker container ls -aq)

------------------
Criar um container Postgres
(ver a documentação no Docker Hub  -  https://hub.docker.com/_/postgres/)
docker container run -d -p 5432:5432 -e POSTGRES_DB=aula-iniciativa -e POSTGRES_PASSWORD=Iniciativa1234 -e POSTGRES_USER=iniciativadevops postgres 

psql --dbname=aula-iniciativa --host=localhost --port=5432 --username=iniciativadevops

Resultado da conexão:
root@ubuntu:/home/azureuser# psql --dbname=aula-iniciativa --host=localhost --port=5432 --username=iniciativadevops
Password for user iniciativadevops: 
psql (12.11 (Ubuntu 12.11-0ubuntu0.20.04.1), server 14.4 (Debian 14.4-1.pgdg110+1))
WARNING: psql major version 12, server major version 14.
         Some psql features might not work.
Type "help" for help.

aula-iniciativa=# 
-----------------------------------

Agora preparando a minha imagem do docker

Exemplo: imagem do ubuntu com o curl
Usar o Dockerfile
Vantagens: automatizar a criação do container e fazer versionamento
Instalei a extensão do Docker no VSCode para criar o Docker file
Copiei para um arquivo Dockerfile na VM, usando o vim

rodei o comando para criar a imagem:
 sudo docker build -t ubuntu-curl .

para ver as imagens criadas:
 sudo docker image ls

--------------------
Construção em camadas (processo de construção de imagens)
-> cada instrução no Dockerfile é uma camada
-> a imagem é somente leitura
-> o container é uma camada acima, porém é leitura/escrita
-> o container otimiza o espaço fazendo referência à imagem
-> se eu executar novamente a construção da imagem, ele aproveita as camadas que já foram construídas; se mudar a ordem das instruções ele vai reconstruir
-> se eu quiser forçar a reconstrução, tenho que usar a opção --no-cache

------------------
Limpar as imagens criadas:

docker image rm <id> (pode usar os primeiros caracteres apenas)

docker image prune (apaga lixos de imagens temporárias)

Apagar todas as imagens:
docker container rm -f $(docker container ls -aq)

-------------------
Enviar a imagem para o Docker Hub:

precisa criar a imagem com a estrutura:
<namespace>/<nomerepo>:<tag>
szalbuque/ubuntu-curl:v01

(se eu não colocar a tag, uso a versão latest)

docker tag ubuntu-curl szalbuque/ubuntu-curl:v1
docker tag ubuntu-curl szalbuque/ubuntu-curl:latest

docker login
docker push <imagem>

----------------------------
Para usar a minha imagem que está no docker hub:

docker container run -it szalbuque/ubuntu-curl:v1 /bin/bash

------------------------------
Usando a aplicação de conversão de temperatura:

Fazer um fork no github https://bit.ly/conversao-temperatura

git clone para a vm ubuntu

entra na pasta da aplicação e cria o Docker file

Cria a imagem com:
sudo docker build -t szalbuque/conversao-temperatura:v1 .

Rodar para criar o container e levantar a aplicação:
sudo docker container run -d -p 8080:8080 szalbuque/conversao-temperatura:v1

Para testar:
curl localhost:8080

(parei em 2:59:28)


 





